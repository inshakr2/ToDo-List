plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.9'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.rest'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {

	compileOnly {
		extendsFrom annotationProcessor
	}

}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	// https://mvnrepository.com/artifact/org.springframework.security.oauth.boot/spring-security-oauth2-autoconfigure
	implementation 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.6.8'

	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-web'
// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-configuration-processor
	implementation 'org.springframework.boot:spring-boot-configuration-processor:3.0.5'


	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	annotationProcessor 'org.projectlombok:lombok'

	// https://mvnrepository.com/artifact/org.postgresql/postgresql
	testImplementation 'org.postgresql:postgresql:42.5.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-params
	testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
	// https://mvnrepository.com/artifact/org.springframework.security/spring-security-test
	testImplementation 'org.springframework.security:spring-security-test'


}
ext {
	set('snippetsDir', file("build/generated-snippets"))
}

test {
	useJUnitPlatform()
	outputs.dir snippetsDir
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

asciidoctor.doFirst {
	println("---------------- delete present asciidoctor.")
	delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc/")
	into file("src/main/resources/static/docs")
}

bootJar {
	enabled = true
	dependsOn copyDocument
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}

build {
	dependsOn copyDocument
}

